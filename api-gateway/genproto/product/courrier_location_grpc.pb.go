// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: protos/courrier_location.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CourierLocationService_CreateCourierLocation_FullMethodName          = "/product.CourierLocationService/CreateCourierLocation"
	CourierLocationService_GetCourierLocation_FullMethodName             = "/product.CourierLocationService/GetCourierLocation"
	CourierLocationService_GetAllCourierLocations_FullMethodName         = "/product.CourierLocationService/GetAllCourierLocations"
	CourierLocationService_UpdateCourierLocation_FullMethodName          = "/product.CourierLocationService/UpdateCourierLocation"
	CourierLocationService_GetCourierLocationsByTimeRange_FullMethodName = "/product.CourierLocationService/GetCourierLocationsByTimeRange"
	CourierLocationService_UpdateCourierLocationStatus_FullMethodName    = "/product.CourierLocationService/UpdateCourierLocationStatus"
)

// CourierLocationServiceClient is the client API for CourierLocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CourierLocationServiceClient interface {
	CreateCourierLocation(ctx context.Context, in *CreateCourierLocationRequest, opts ...grpc.CallOption) (*Empty, error)
	GetCourierLocation(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*CourierLocation, error)
	GetAllCourierLocations(ctx context.Context, in *GetAllCourierLocationsReq, opts ...grpc.CallOption) (*GetAllCourierLocationsRes, error)
	UpdateCourierLocation(ctx context.Context, in *UpdateCourierLocationRequest, opts ...grpc.CallOption) (*UpdateCourierLocationResponse, error)
	GetCourierLocationsByTimeRange(ctx context.Context, in *GetCourierLocationsByTimeRangeReq, opts ...grpc.CallOption) (*GetCourierLocationsByTimeRangeRes, error)
	UpdateCourierLocationStatus(ctx context.Context, in *UpdateCourierLocationStatusReq, opts ...grpc.CallOption) (*UpdateCourierLocationStatusRes, error)
}

type courierLocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCourierLocationServiceClient(cc grpc.ClientConnInterface) CourierLocationServiceClient {
	return &courierLocationServiceClient{cc}
}

func (c *courierLocationServiceClient) CreateCourierLocation(ctx context.Context, in *CreateCourierLocationRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, CourierLocationService_CreateCourierLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierLocationServiceClient) GetCourierLocation(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*CourierLocation, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CourierLocation)
	err := c.cc.Invoke(ctx, CourierLocationService_GetCourierLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierLocationServiceClient) GetAllCourierLocations(ctx context.Context, in *GetAllCourierLocationsReq, opts ...grpc.CallOption) (*GetAllCourierLocationsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllCourierLocationsRes)
	err := c.cc.Invoke(ctx, CourierLocationService_GetAllCourierLocations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierLocationServiceClient) UpdateCourierLocation(ctx context.Context, in *UpdateCourierLocationRequest, opts ...grpc.CallOption) (*UpdateCourierLocationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCourierLocationResponse)
	err := c.cc.Invoke(ctx, CourierLocationService_UpdateCourierLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierLocationServiceClient) GetCourierLocationsByTimeRange(ctx context.Context, in *GetCourierLocationsByTimeRangeReq, opts ...grpc.CallOption) (*GetCourierLocationsByTimeRangeRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCourierLocationsByTimeRangeRes)
	err := c.cc.Invoke(ctx, CourierLocationService_GetCourierLocationsByTimeRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *courierLocationServiceClient) UpdateCourierLocationStatus(ctx context.Context, in *UpdateCourierLocationStatusReq, opts ...grpc.CallOption) (*UpdateCourierLocationStatusRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCourierLocationStatusRes)
	err := c.cc.Invoke(ctx, CourierLocationService_UpdateCourierLocationStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CourierLocationServiceServer is the server API for CourierLocationService service.
// All implementations must embed UnimplementedCourierLocationServiceServer
// for forward compatibility
type CourierLocationServiceServer interface {
	CreateCourierLocation(context.Context, *CreateCourierLocationRequest) (*Empty, error)
	GetCourierLocation(context.Context, *GetById) (*CourierLocation, error)
	GetAllCourierLocations(context.Context, *GetAllCourierLocationsReq) (*GetAllCourierLocationsRes, error)
	UpdateCourierLocation(context.Context, *UpdateCourierLocationRequest) (*UpdateCourierLocationResponse, error)
	GetCourierLocationsByTimeRange(context.Context, *GetCourierLocationsByTimeRangeReq) (*GetCourierLocationsByTimeRangeRes, error)
	UpdateCourierLocationStatus(context.Context, *UpdateCourierLocationStatusReq) (*UpdateCourierLocationStatusRes, error)
	mustEmbedUnimplementedCourierLocationServiceServer()
}

// UnimplementedCourierLocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCourierLocationServiceServer struct {
}

func (UnimplementedCourierLocationServiceServer) CreateCourierLocation(context.Context, *CreateCourierLocationRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCourierLocation not implemented")
}
func (UnimplementedCourierLocationServiceServer) GetCourierLocation(context.Context, *GetById) (*CourierLocation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourierLocation not implemented")
}
func (UnimplementedCourierLocationServiceServer) GetAllCourierLocations(context.Context, *GetAllCourierLocationsReq) (*GetAllCourierLocationsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCourierLocations not implemented")
}
func (UnimplementedCourierLocationServiceServer) UpdateCourierLocation(context.Context, *UpdateCourierLocationRequest) (*UpdateCourierLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourierLocation not implemented")
}
func (UnimplementedCourierLocationServiceServer) GetCourierLocationsByTimeRange(context.Context, *GetCourierLocationsByTimeRangeReq) (*GetCourierLocationsByTimeRangeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCourierLocationsByTimeRange not implemented")
}
func (UnimplementedCourierLocationServiceServer) UpdateCourierLocationStatus(context.Context, *UpdateCourierLocationStatusReq) (*UpdateCourierLocationStatusRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCourierLocationStatus not implemented")
}
func (UnimplementedCourierLocationServiceServer) mustEmbedUnimplementedCourierLocationServiceServer() {
}

// UnsafeCourierLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CourierLocationServiceServer will
// result in compilation errors.
type UnsafeCourierLocationServiceServer interface {
	mustEmbedUnimplementedCourierLocationServiceServer()
}

func RegisterCourierLocationServiceServer(s grpc.ServiceRegistrar, srv CourierLocationServiceServer) {
	s.RegisterService(&CourierLocationService_ServiceDesc, srv)
}

func _CourierLocationService_CreateCourierLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCourierLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierLocationServiceServer).CreateCourierLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierLocationService_CreateCourierLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierLocationServiceServer).CreateCourierLocation(ctx, req.(*CreateCourierLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierLocationService_GetCourierLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierLocationServiceServer).GetCourierLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierLocationService_GetCourierLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierLocationServiceServer).GetCourierLocation(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierLocationService_GetAllCourierLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCourierLocationsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierLocationServiceServer).GetAllCourierLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierLocationService_GetAllCourierLocations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierLocationServiceServer).GetAllCourierLocations(ctx, req.(*GetAllCourierLocationsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierLocationService_UpdateCourierLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourierLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierLocationServiceServer).UpdateCourierLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierLocationService_UpdateCourierLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierLocationServiceServer).UpdateCourierLocation(ctx, req.(*UpdateCourierLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierLocationService_GetCourierLocationsByTimeRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCourierLocationsByTimeRangeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierLocationServiceServer).GetCourierLocationsByTimeRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierLocationService_GetCourierLocationsByTimeRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierLocationServiceServer).GetCourierLocationsByTimeRange(ctx, req.(*GetCourierLocationsByTimeRangeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CourierLocationService_UpdateCourierLocationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCourierLocationStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CourierLocationServiceServer).UpdateCourierLocationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CourierLocationService_UpdateCourierLocationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CourierLocationServiceServer).UpdateCourierLocationStatus(ctx, req.(*UpdateCourierLocationStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CourierLocationService_ServiceDesc is the grpc.ServiceDesc for CourierLocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CourierLocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.CourierLocationService",
	HandlerType: (*CourierLocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCourierLocation",
			Handler:    _CourierLocationService_CreateCourierLocation_Handler,
		},
		{
			MethodName: "GetCourierLocation",
			Handler:    _CourierLocationService_GetCourierLocation_Handler,
		},
		{
			MethodName: "GetAllCourierLocations",
			Handler:    _CourierLocationService_GetAllCourierLocations_Handler,
		},
		{
			MethodName: "UpdateCourierLocation",
			Handler:    _CourierLocationService_UpdateCourierLocation_Handler,
		},
		{
			MethodName: "GetCourierLocationsByTimeRange",
			Handler:    _CourierLocationService_GetCourierLocationsByTimeRange_Handler,
		},
		{
			MethodName: "UpdateCourierLocationStatus",
			Handler:    _CourierLocationService_UpdateCourierLocationStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/courrier_location.proto",
}
