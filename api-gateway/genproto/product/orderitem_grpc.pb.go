// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.12.4
// source: protos/orderitem.proto

package product

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	OrderItemService_CreateOrderItem_FullMethodName        = "/product.OrderItemService/CreateOrderItem"
	OrderItemService_GetOrderItem_FullMethodName           = "/product.OrderItemService/GetOrderItem"
	OrderItemService_GetAllOrderItems_FullMethodName       = "/product.OrderItemService/GetAllOrderItems"
	OrderItemService_UpdateOrderItem_FullMethodName        = "/product.OrderItemService/UpdateOrderItem"
	OrderItemService_GetOrderItemsByOrder_FullMethodName   = "/product.OrderItemService/GetOrderItemsByOrder"
	OrderItemService_GetOrderItemsByProduct_FullMethodName = "/product.OrderItemService/GetOrderItemsByProduct"
)

// OrderItemServiceClient is the client API for OrderItemService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderItemServiceClient interface {
	CreateOrderItem(ctx context.Context, in *CreateOrderItemRequest, opts ...grpc.CallOption) (*Empty, error)
	GetOrderItem(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*OrderItem, error)
	GetAllOrderItems(ctx context.Context, in *GetAllOrderItemsReq, opts ...grpc.CallOption) (*GetAllOrderItemsRes, error)
	UpdateOrderItem(ctx context.Context, in *UpdateOrderItemRequest, opts ...grpc.CallOption) (*UpdateOrderItemResponse, error)
	GetOrderItemsByOrder(ctx context.Context, in *GetByOrderReq, opts ...grpc.CallOption) (*GetAllOrderItemsRes, error)
	GetOrderItemsByProduct(ctx context.Context, in *GetByProductReq, opts ...grpc.CallOption) (*GetAllOrderItemsRes, error)
}

type orderItemServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderItemServiceClient(cc grpc.ClientConnInterface) OrderItemServiceClient {
	return &orderItemServiceClient{cc}
}

func (c *orderItemServiceClient) CreateOrderItem(ctx context.Context, in *CreateOrderItemRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, OrderItemService_CreateOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemServiceClient) GetOrderItem(ctx context.Context, in *GetById, opts ...grpc.CallOption) (*OrderItem, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderItem)
	err := c.cc.Invoke(ctx, OrderItemService_GetOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemServiceClient) GetAllOrderItems(ctx context.Context, in *GetAllOrderItemsReq, opts ...grpc.CallOption) (*GetAllOrderItemsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOrderItemsRes)
	err := c.cc.Invoke(ctx, OrderItemService_GetAllOrderItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemServiceClient) UpdateOrderItem(ctx context.Context, in *UpdateOrderItemRequest, opts ...grpc.CallOption) (*UpdateOrderItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateOrderItemResponse)
	err := c.cc.Invoke(ctx, OrderItemService_UpdateOrderItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemServiceClient) GetOrderItemsByOrder(ctx context.Context, in *GetByOrderReq, opts ...grpc.CallOption) (*GetAllOrderItemsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOrderItemsRes)
	err := c.cc.Invoke(ctx, OrderItemService_GetOrderItemsByOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderItemServiceClient) GetOrderItemsByProduct(ctx context.Context, in *GetByProductReq, opts ...grpc.CallOption) (*GetAllOrderItemsRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllOrderItemsRes)
	err := c.cc.Invoke(ctx, OrderItemService_GetOrderItemsByProduct_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderItemServiceServer is the server API for OrderItemService service.
// All implementations must embed UnimplementedOrderItemServiceServer
// for forward compatibility
type OrderItemServiceServer interface {
	CreateOrderItem(context.Context, *CreateOrderItemRequest) (*Empty, error)
	GetOrderItem(context.Context, *GetById) (*OrderItem, error)
	GetAllOrderItems(context.Context, *GetAllOrderItemsReq) (*GetAllOrderItemsRes, error)
	UpdateOrderItem(context.Context, *UpdateOrderItemRequest) (*UpdateOrderItemResponse, error)
	GetOrderItemsByOrder(context.Context, *GetByOrderReq) (*GetAllOrderItemsRes, error)
	GetOrderItemsByProduct(context.Context, *GetByProductReq) (*GetAllOrderItemsRes, error)
	mustEmbedUnimplementedOrderItemServiceServer()
}

// UnimplementedOrderItemServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrderItemServiceServer struct {
}

func (UnimplementedOrderItemServiceServer) CreateOrderItem(context.Context, *CreateOrderItemRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrderItem not implemented")
}
func (UnimplementedOrderItemServiceServer) GetOrderItem(context.Context, *GetById) (*OrderItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderItem not implemented")
}
func (UnimplementedOrderItemServiceServer) GetAllOrderItems(context.Context, *GetAllOrderItemsReq) (*GetAllOrderItemsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllOrderItems not implemented")
}
func (UnimplementedOrderItemServiceServer) UpdateOrderItem(context.Context, *UpdateOrderItemRequest) (*UpdateOrderItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderItem not implemented")
}
func (UnimplementedOrderItemServiceServer) GetOrderItemsByOrder(context.Context, *GetByOrderReq) (*GetAllOrderItemsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderItemsByOrder not implemented")
}
func (UnimplementedOrderItemServiceServer) GetOrderItemsByProduct(context.Context, *GetByProductReq) (*GetAllOrderItemsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderItemsByProduct not implemented")
}
func (UnimplementedOrderItemServiceServer) mustEmbedUnimplementedOrderItemServiceServer() {}

// UnsafeOrderItemServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderItemServiceServer will
// result in compilation errors.
type UnsafeOrderItemServiceServer interface {
	mustEmbedUnimplementedOrderItemServiceServer()
}

func RegisterOrderItemServiceServer(s grpc.ServiceRegistrar, srv OrderItemServiceServer) {
	s.RegisterService(&OrderItemService_ServiceDesc, srv)
}

func _OrderItemService_CreateOrderItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrderItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).CreateOrderItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderItemService_CreateOrderItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).CreateOrderItem(ctx, req.(*CreateOrderItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemService_GetOrderItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).GetOrderItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderItemService_GetOrderItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).GetOrderItem(ctx, req.(*GetById))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemService_GetAllOrderItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllOrderItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).GetAllOrderItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderItemService_GetAllOrderItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).GetAllOrderItems(ctx, req.(*GetAllOrderItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemService_UpdateOrderItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateOrderItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).UpdateOrderItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderItemService_UpdateOrderItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).UpdateOrderItem(ctx, req.(*UpdateOrderItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemService_GetOrderItemsByOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByOrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).GetOrderItemsByOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderItemService_GetOrderItemsByOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).GetOrderItemsByOrder(ctx, req.(*GetByOrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderItemService_GetOrderItemsByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByProductReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderItemServiceServer).GetOrderItemsByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrderItemService_GetOrderItemsByProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderItemServiceServer).GetOrderItemsByProduct(ctx, req.(*GetByProductReq))
	}
	return interceptor(ctx, in, info, handler)
}

// OrderItemService_ServiceDesc is the grpc.ServiceDesc for OrderItemService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrderItemService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product.OrderItemService",
	HandlerType: (*OrderItemServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrderItem",
			Handler:    _OrderItemService_CreateOrderItem_Handler,
		},
		{
			MethodName: "GetOrderItem",
			Handler:    _OrderItemService_GetOrderItem_Handler,
		},
		{
			MethodName: "GetAllOrderItems",
			Handler:    _OrderItemService_GetAllOrderItems_Handler,
		},
		{
			MethodName: "UpdateOrderItem",
			Handler:    _OrderItemService_UpdateOrderItem_Handler,
		},
		{
			MethodName: "GetOrderItemsByOrder",
			Handler:    _OrderItemService_GetOrderItemsByOrder_Handler,
		},
		{
			MethodName: "GetOrderItemsByProduct",
			Handler:    _OrderItemService_GetOrderItemsByProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/orderitem.proto",
}
